/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.JSONObject;

public class App {
	public static void main(String[] args) {
		ArrayList<User> users = new ArrayList<>();
		users.add(new User("jaipal", "dffe86797a27a6cc1e7d4f3b7628783bc1292f310eeb352148f62a993c30c027", 75));
		users.add(new User("hema", "hema007", 75));

		ArrayList<Message> messages = new ArrayList<>();
		// messages.add(new Message("Hello World", "jaipal",
		// 		"f369cb89fc627e668987007d121ed1eacdc01db9e28f8bb26f358b7d8c4f08ac", new Message.MsgTime(28, 74)));
		Server server = new Server(8000);
		server.add_route("/", (request, response) -> {
			User user = User.readJsonHome(request.body);
			if (user == null) {
				response.write("User does not exist, please login");
				response.statusCode = 401;
				return;
			}
			for (User el : users) {
				if (el.name.equalsIgnoreCase(user.name) && user.token.equals(el.token)) {
					if (messages.size() == 0) {
						HashMap<String, String> map = new HashMap<>();
						map.put("output", "No messages yet");
						JSONObject object = new JSONObject(map);
						response.contentType = "application/json";
						response.write(object.toJSONString());
					} else {
						response.writeJson(messages.get(messages.size() - 1));
					}
					return;
				}
			}
			response.setStatusCode(401);
			response.write("You are not allowed to check chats");
		});
		server.add_route("/login", (request, response) -> {
			User user = User.readJsonAuth(request.body);
			HashMap<String, String> map = new HashMap<>();
			if (user == null) {
				map.put("auth", "AUTH_FAILED");
				JSONObject object = new JSONObject(map);
				response.setStatusCode(401);
				response.contentType = "application/json";
				response.write(object.toJSONString());
				return;
			}
			for (User el : users) {
				if (el.name.equalsIgnoreCase(user.name) && el.password.equals(user.password)) {
					map.put("auth", el.token);
					JSONObject object = new JSONObject(map);
					response.contentType = "application/json";
					response.write(object.toJSONString());
					return;
				}
			}
			response.setStatusCode(401);
			response.write("You are not allowed to authenticate");
		});
		server.add_route("/send-msg", (request, response) -> {
			Message message = Message.readJson(request.body);
			if (message == null) {
				response.setStatusCode(400);
				response.write("User does not exist, please login");
				return;
			}
			for (User el : users) {
				if (el.name.equalsIgnoreCase(message.sender) && el.token.equals(message.token)) {
					messages.add(message);
					response.write("Message sent");
					return;
				}
			}
			response.write("Invalid member token");
		});
		server.start();
	}
}
