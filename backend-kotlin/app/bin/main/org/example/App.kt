/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.example.UserNew
import org.example.MessageNew

import org.json.simple.JSONObject;

fun main() {
    var users = mutableListOf<User>();
    var messages = mutableListOf<Message>();

    val server = Server(8000)
    server.add_route("/", fun (req: Request, res: Response) {
        val user = UserNew.fromHome(req.body);
        if (user == null) {
            res.write("User does not exist, please login");
            res.code = 401;
            return;
        }
        for (el in users) {
            if (el.name.lowercase() == user.name.lowercase() && user.token == el.token) {
                if (messages.size == 0) {
                    var map = HashMap<String, String>();
                    map.put("output", "No messages yet");
                    res.writeJson(map)
                } else {
                    res.writeJson(messages.get(messages.size - 1));
                }
                return;
            }
        }
        res.code = 401;
        res.write("You are not allowed to check chats");
    })
    server.add_route("/login", fun (request, response) {
        var user = UserNew.fromAuth(request.body);
        var map = HashMap<String, String>();
        if (user == null) {
            map.put("auth", "AUTH_FAILED");
            response.code = 401;
            response.writeJson(map)
            return;
        }
        for (el in users) {
            if (el.name.lowercase() == user.name.lowercase() && el.password == user.password) {
                map.put("auth", el.token);
                response.writeJson(map)
                return;
            }
        }
        response.code = 401;
        response.write("You are not allowed to authenticate");
    });
    server.add_route("/login", fun (request, response) {
        val message = MessageNew.create(request.body);
        if (message == null) {
            response.code = 400;
            response.write("User does not exist, please login");
            return;
        }
        for (el in users) {
            if (el.name.lowercase() == message.sender.lowercase() && el.token == message.token) {
                messages.add(message);
                response.write("Message sent");
                return;
            }
        }
        response.write("Invalid member token");
    });
    server.start();
}
